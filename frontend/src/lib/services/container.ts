// Browser-based container management using in-memory storage
// This replaces Docker containers with browser-based project management

export interface Project {
  id: string;
  name: string;
  status: "active" | "inactive";
  created: string;
  lastModified: string;
  template: string;
}

const PROJECTS_KEY = "december_projects";

// Get all projects from localStorage
export function getProjects(): Project[] {
  if (typeof window === "undefined") return [];
  
  const stored = localStorage.getItem(PROJECTS_KEY);
  if (!stored) return [];
  
  try {
    return JSON.parse(stored);
  } catch {
    return [];
  }
}

// Save projects to localStorage
function saveProjects(projects: Project[]): void {
  if (typeof window === "undefined") return;
  localStorage.setItem(PROJECTS_KEY, JSON.stringify(projects));
}

// Create a new project
export function createProject(template: string = "Next.js"): Project {
  const project: Project = {
    id: generateId(),
    name: `Project ${Date.now()}`,
    status: "active",
    created: new Date().toISOString(),
    lastModified: new Date().toISOString(),
    template,
  };

  const projects = getProjects();
  projects.push(project);
  saveProjects(projects);

  return project;
}

// Get a specific project
export function getProject(id: string): Project | null {
  const projects = getProjects();
  return projects.find((p) => p.id === id) || null;
}

// Update a project
export function updateProject(id: string, updates: Partial<Project>): Project | null {
  const projects = getProjects();
  const index = projects.findIndex((p) => p.id === id);
  
  if (index === -1) return null;
  
  projects[index] = {
    ...projects[index],
    ...updates,
    lastModified: new Date().toISOString(),
  };
  
  saveProjects(projects);
  return projects[index];
}

// Delete a project
export function deleteProject(id: string): boolean {
  const projects = getProjects();
  const filtered = projects.filter((p) => p.id !== id);
  
  if (filtered.length === projects.length) return false;
  
  saveProjects(filtered);
  return true;
}

// Generate a unique ID
function generateId(): string {
  return `${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
}

// Initialize a project with default Next.js template files
export async function initializeProjectFiles(projectId: string): Promise<void> {
  const { writeFile } = await import("./fileSystem");
  
  // Default Next.js template files
  const defaultFiles = {
    "package.json": JSON.stringify({
      name: "nextjs-project",
      version: "0.1.0",
      private: true,
      scripts: {
        dev: "next dev",
        build: "next build",
        start: "next start",
        lint: "next lint",
      },
      dependencies: {
        next: "15.3.2",
        react: "^19.0.0",
        "react-dom": "^19.0.0",
      },
      devDependencies: {
        "@types/node": "^20",
        "@types/react": "^19",
        "@types/react-dom": "^19",
        typescript: "^5",
        "@tailwindcss/postcss": "^4",
        tailwindcss: "^4",
      },
    }, null, 2),
    
    "tsconfig.json": JSON.stringify({
      compilerOptions: {
        target: "ES2017",
        lib: ["dom", "dom.iterable", "esnext"],
        allowJs: true,
        skipLibCheck: true,
        strict: true,
        noEmit: true,
        esModuleInterop: true,
        module: "esnext",
        moduleResolution: "bundler",
        resolveJsonModule: true,
        isolatedModules: true,
        jsx: "preserve",
        incremental: true,
        plugins: [{ name: "next" }],
        paths: {
          "@/*": ["./src/*"],
        },
      },
      include: ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
      exclude: ["node_modules"],
    }, null, 2),
    
    "next.config.ts": `import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
`,
    
    "src/app/page.tsx": `export default function Home() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 to-gray-800">
      <div className="text-center">
        <h1 className="text-5xl font-bold text-white mb-4">
          Welcome to Your Project
        </h1>
        <p className="text-gray-300 text-lg">
          Start building something amazing!
        </p>
      </div>
    </div>
  );
}
`,
    
    "src/app/layout.tsx": `import type { Metadata } from "next";
import "./globals.css";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by December",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className="antialiased">
        {children}
      </body>
    </html>
  );
}
`,
    
    "src/app/globals.css": `@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
`,
    
    "README.md": `# Welcome to Your December Project

This project was created with December AI IDE.

## Getting Started

Run the development server:

\`\`\`bash
npm run dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) to see your app.

## Learn More

- [Next.js Documentation](https://nextjs.org/docs)
- [React Documentation](https://react.dev)
`,
  };

  // Write all default files
  for (const [path, content] of Object.entries(defaultFiles)) {
    await writeFile(projectId, path, content);
  }
}
